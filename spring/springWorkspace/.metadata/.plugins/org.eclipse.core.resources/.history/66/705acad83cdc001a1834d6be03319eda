package com.encore.rest.controller;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.encore.rest.domain.Greeting;

/* 버전 4.3 이상을 요구함
프론트와 상관 없는 독립적인 기술. 요청이 어떻게 들어왔는지 알 필요가 없음. */
@RestController
public class GreetingController {
	
	//필드 추가
	private static final String TEMPLATE = "Hi~~~~, %s";
	private final AtomicLong counter = new AtomicLong();
	
	// http://127.0.0.1:888/rest/greet 
	@GetMapping("/greet") //RequestMapping("/greet")으로 써도 된다.
	public Greeting sayGreet() {
		return new Greeting(314L, "Restful API");
		/* 결과 페이지를 리턴하지 않고, 데이터만 리턴한다!
		
		출력 결과) {"id":314,"content":"Restful API"}
		
		객체를 던지는데 json으로 반환해서 던진다. 
		그래서 Restful 할 때는 json 라이브러리가 반드시 필요! */
	}
	
	/* http://127.0.0.1:888/rest/greet/33
	 * 전부 다 보여주는 게 아니라 33번 아이디에 해당하는 것만 가져옴.
	 *
	 * @PathVariable 은 파라미터를 URL 경로에 포함시키는 방법이다.(안 쓰면 에러남)
	 * {}를 이용해서 매핑되는 URL 경로에 작성해주면 @PathVariable 어노테이션으로 작성된 파라미터에
	 * 자동으로 매핑된다.*/
	@GetMapping("greet/{id}")
	public String showGreet(@PathVariable int id) {//파라미터명이 매핑 안의 변수명과 같아야 함
		return "Hello RestfulAPI case number...."+id;
		/* 출력결과) Hello RestfulAPI case number....33 */
	}
	
	// http://127.0.0.1:8888/rest/greet2?name=연희 => 출력결과) {"id":1,"content":"Hi~~~~, 연희"}
	// http://127.0.0.1:8888/rest/greet2 => 출력결과) {"id":1,"content":"Hi~~~~, world"} 
	@GetMapping("/greet2")
	public Greeting sayGreet2(@RequestParam(value="name", required=false, defaultValue="world") String name) {
		return new Greeting(counter.incrementAndGet(), String.format(TEMPLATE, name));
	}
}
